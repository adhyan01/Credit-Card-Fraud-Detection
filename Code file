import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score
import warnings
warnings.filterwarnings('ignore')
%matplotlib inline

df = pd.read_csv('creditcard.csv')
df.head()

# statistical info
df.describe()

# datatype info
df.info()

# check for null values
df.isnull().sum()

sns.countplot(df['Class'])

df_temp = df.drop(columns=['Time', 'Amount', 'Class'], axis=1)

# create dist plots
fig, ax = plt.subplots(ncols=4, nrows=7, figsize=(20, 50))
index = 0
ax = ax.flatten()

for col in df_temp.columns:
    sns.distplot(df_temp[col], ax=ax[index])
    index += 1
plt.tight_layout(pad=0.5, w_pad=0.5, h_pad=5)

sns.distplot(df['Time'])

sns.distplot(df['Amount'])

correlation_matrix = df.corr()
top_features = correlation_matrix.index
print(top_features)

plt.figure(figsize=(30,40))
map = sns.heatmap(correlation_matrix, annot=True, cmap='RdYlGn')

print(map)

X = df.drop(columns=['Class'], axis=1)
y = df['Class']

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_scaler = sc.fit_transform(X)

x_scaler[-1]

# train test split
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, f1_score
x_train, x_test, y_train, y_test = train_test_split(x_scaler, y, test_size=0.25, random_state=42, stratify=y)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
# training
model.fit(x_train, y_train)
# testing
y_pred = model.predict(x_test)
test_data_accuracy = accuracy_score(y_pred, y_test)
print(classification_report(y_test, y_pred))
print("F1 Score:",f1_score(y_test, y_pred))
print('Accuracy score on Test Data : ', test_data_accuracy)

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()
# training
model.fit(x_train, y_train)
# testing
y_pred = model.predict(x_test)
print(classification_report(y_test, y_pred))
print("F1 Score:",f1_score(y_test, y_pred))
test_data_accuracy = accuracy_score(y_pred, y_test)
print('Accuracy score on Test Data : ', test_data_accuracy)

from xgboost import XGBClassifier
model = XGBClassifier(n_jobs=-1)
# training
model.fit(x_train, y_train)
# testing
y_pred = model.predict(x_test)
print(classification_report(y_test, y_pred))
print("F1 Score:",f1_score(y_test, y_pred))
test_data_accuracy = accuracy_score(y_pred, y_test)
print('Accuracy score on Test Data : ', test_data_accuracy)

from sklearn.tree import DecisionTreeClassifier 
model = DecisionTreeClassifier() 
# training
model.fit(x_train, y_train)
# testing
y_pred = model.predict(x_test)
print(classification_report(y_test, y_pred))
print("F1 Score:",f1_score(y_test, y_pred))
test_data_accuracy = accuracy_score(y_pred, y_test)
print('Accuracy score on Test Data : ', test_data_accuracy)

sns.countplot(y_train)

# balance the class with equal distribution
from imblearn.over_sampling import SMOTE
over_sample = SMOTE()
x_smote, y_smote = over_sample.fit_resample(x_train, y_train)

sns.countplot(y_smote)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
# training
model.fit(x_smote, y_smote)
# testing
y_pred = model.predict(x_test)
print(classification_report(y_test, y_pred))
print("F1 Score:",f1_score(y_test, y_pred))
test_data_accuracy = accuracy_score(y_pred, y_test)
print('Accuracy score on Test Data : ', test_data_accuracy)

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(n_jobs=-1)
# training
model.fit(x_smote, y_smote)
# testing
y_pred = model.predict(x_test)
print(classification_report(y_test, y_pred))
print("F1 Score:",f1_score(y_test, y_pred))
test_data_accuracy = accuracy_score(y_pred, y_test)
print('Accuracy score on Test Data : ', test_data_accuracy)

from xgboost import XGBClassifier
model = XGBClassifier(n_jobs=-1)
# training
model.fit(x_smote, y_smote)
# testing
y_pred = model.predict(x_test)
print(classification_report(y_test, y_pred))
print("F1 Score:",f1_score(y_test, y_pred))
test_data_accuracy = accuracy_score(y_pred, y_test)
print('Accuracy score on Test Data : ', test_data_accuracy)

from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()
# training
model.fit(x_smote, y_smote)
# testing
y_pred = model.predict(x_test)
print(classification_report(y_test, y_pred))
print("F1 Score:",f1_score(y_test, y_pred))
test_data_accuracy = accuracy_score(y_pred, y_test)
print('Accuracy score on Test Data : ', test_data_accuracy)

dfless = df.drop(columns=['V1', 'V8','V9','V13','V15','V19','V20','V21','V22','V23','V24','V25','V26','V28','Class'], axis=1)
dfless_y=df['Class']

sc = StandardScaler()
x_scaler_less = sc.fit_transform(dfless)

x_scaler_less[-1]

# train test split
x_train_l, x_test_l, y_train_l, y_test_l = train_test_split(x_scaler_less, dfless_y, test_size=0.25, random_state=42, stratify=y)

model = LogisticRegression()
# training
model.fit(x_train_l, y_train_l)
# testing
y_pred_l = model.predict(x_test_l)
print(classification_report(y_test_l, y_pred_l))
print("F1 Score:",f1_score(y_test_l, y_pred_l))
test_data_accuracy = accuracy_score(y_pred, y_test)
print('Accuracy score on Test Data : ', test_data_accuracy)

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()
# training
model.fit(x_train_l, y_train_l)
# testing
y_pred_l = model.predict(x_test_l)
print(y_pred_l.shape)
print(classification_report(y_test_l, y_pred_l))
print("F1 Score:",f1_score(y_test_l, y_pred_l))
test_data_accuracy = accuracy_score(y_pred, y_test)
print('Accuracy score on Test Data : ', test_data_accuracy)

from xgboost import XGBClassifier
model = XGBClassifier(n_jobs=-1)
# training
model.fit(x_train_l, y_train_l)
# testing
y_pred_l = model.predict(x_test_l)
print(classification_report(y_test_l, y_pred_l))
print("F1 Score:",f1_score(y_test_l, y_pred_l))
test_data_accuracy = accuracy_score(y_pred, y_test)
print('Accuracy score on Test Data : ', test_data_accuracy)

from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()
# training
model.fit(x_train_l, y_train_l)
# testing
y_pred_l = model.predict(x_test_l)
print(classification_report(y_test_l, y_pred_l))
print("F1 Score:",f1_score(y_test_l, y_pred_l))
test_data_accuracy = accuracy_score(y_pred, y_test)
print('Accuracy score on Test Data : ', test_data_accuracy)

sns.countplot(y_train_l)

from imblearn.over_sampling import SMOTE
over_sample = SMOTE()
x_smote, y_smote = over_sample.fit_resample(x_train_l, y_train_l)

sns.countplot(y_smote)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
# training
model.fit(x_smote, y_smote)
# testing
y_pred_l = model.predict(x_test_l)
print(classification_report(y_test_l, y_pred_l))
print("F1 Score:",f1_score(y_test_l, y_pred_l))
test_data_accuracy = accuracy_score(y_pred_l, y_test_l)
print('Accuracy score on Test Data : ', test_data_accuracy)

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(n_jobs=-1)
# training
model.fit(x_smote, y_smote)
# testing
y_pred_l = model.predict(x_test_l)
print(classification_report(y_test_l, y_pred_l))
print("F1 Score:",f1_score(y_test_l, y_pred_l))
test_data_accuracy = accuracy_score(y_pred_l, y_test_l)
print('Accuracy score on Test Data : ', test_data_accuracy)

from xgboost import XGBClassifier
model = XGBClassifier(n_jobs=-1)
# training
model.fit(x_smote, y_smote)
# testing
y_pred_l = model.predict(x_test_l)
print(classification_report(y_test_l, y_pred_l))
print("F1 Score:",f1_score(y_test_l, y_pred_l))
test_data_accuracy = accuracy_score(y_pred_l, y_test_l)
print('Accuracy score on Test Data : ', test_data_accuracy)

from sklearn.tree import DecisionTreeClassifier 
model = DecisionTreeClassifier() 
# training
model.fit(x_smote, y_smote)
# testing
y_pred_l = model.predict(x_test_l)
print(classification_report(y_test_l, y_pred_l))
print("F1 Score:",f1_score(y_test_l, y_pred_l))
test_data_accuracy = accuracy_score(y_pred_l, y_test_l)
print('Accuracy score on Test Data : ', test_data_accuracy)
